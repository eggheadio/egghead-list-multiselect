export default [{
  "completed": false,
  "toggle_favorite_lesson_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/favorites/toggle",
  "toggle_like_lesson_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/likes/toggle",
  "lesson_view_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/views",
  "favorited": false,
  "liked": false,
  "id": 3122,
  "creator_id": 44680,
  "slug": "html-5-use-sticky-positioning-for-section-headers",
  "title": "Use sticky positioning for section headers",
  "state": "submitted",
  "summary": "We can take advantage of sticky positioning to keep a section header at the top of the page while the user scrolls. This is useful for neat categorisation of sections on the page.",
  "duration": 201,
  "old_technology": null,
  "plays_count": 0,
  "published_at": null,
  "is_pro_content": false,
  "difficulty_rating": 0,
  "series_row_order_position": null,
  "free_forever": false,
  "transcript": "",
  "lesson_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers",
  "url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers",
  "path": "/lessons/html-5-use-sticky-positioning-for-section-headers",
  "http_url": "https://egghead.io/lessons/html-5-use-sticky-positioning-for-section-headers",
  "tag_list": ["free"],
  "library_list": [],
  "language_list": ["css", "html"],
  "framework_list": [],
  "tool_list": [],
  "platform_list": [],
  "skillset_list": [],
  "skill_level_list": [],
  "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/175/thumb/csslang.png",
  "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-use-sticky-positioning-for-section-headers-S1Oc29VIz/egghead-use-sticky-positioning-for-section-headers-S1Oc29VIz.jpg",
  "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/landscape/html5.png",
  "transcript_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/transcript",
  "related_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/related",
  "comments_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/comments",
  "lesson_errata": [],
  "is_pro": false,
  "primary_tag": {
    "name": "html",
    "slug": "html",
    "label": "HTML 5",
    "context": "languages",
    "description": "HTML 5 is the structure of our web pages. It is the markup that represents the DOM (document object model).",
    "url": "https://egghead.io/api/v1/tags/html",
    "http_url": "https://egghead.io/browse/languages/html"
  },
  "tags": [{
    "name": "html",
    "slug": "html",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/thumb/html5.png",
    "label": "HTML 5",
    "context": "languages",
    "description": "HTML 5 is the structure of our web pages. It is the markup that represents the DOM (document object model).",
    "url": "https://egghead.io/api/v1/tags/html",
    "http_url": "https://egghead.io/browse/languages/html"
  }, {
    "name": "css",
    "slug": "css",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/175/thumb/csslang.png",
    "label": "CSS",
    "context": "languages",
    "description": "Cascading Style Sheets bring order and beauty to our applications.",
    "url": "https://egghead.io/api/v1/tags/css",
    "http_url": "https://egghead.io/browse/languages/html"
  }],
  "instructor_url": "https://egghead.io/api/v1/instructors/rory-smith",
  "instructor": {
    "id": 105,
    "slug": "rory-smith",
    "full_name": "Rory Smith",
    "first_name": "Rory",
    "last_name": "Smith",
    "twitter": "alan0buchanan",
    "website": "https://github.com/alanbuchanan/",
    "bio": "",
    "bio_short": "Rory is a front end developer from Leeds, UK.",
    "google_plus": "",
    "http_url": "https://egghead.io/instructors/rory-smith",
    "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/105/original/headshot_rory-smith-1.jpg",
    "lessons_url": "https://egghead.io/api/v1/instructors/rory-smith/lessons",
    "published_lessons": 24,
    "published_courses": 1
  },
  "series_url": "https://egghead.io/api/v1/series/optimize-user-experience-for-mobile-devices-and-browsers",
  "series_row_order": 8306688,
  "series": {
    "title": "Optimize User Experience for mobile devices and browsers",
    "description": "A lot of the time, web apps are built primarily with the desktop layout in consideration, and the mobile layout suffers as a result. In this course we are going to discuss using features of user interface which are optimised for mobile devices.\r\n\r\nWe are going to discuss CSS features that make a big difference and build entire components that work great on mobile devices and browsers. We are going to take into account browser support to ensure our users are getting the experience we want them to.\r\n\r\nMore and more of our users depend on their mobile device to use our web apps. With this in mind, we are going to look at how to optimise the components we build for smaller viewports, and how to ensure our customer gets an optimised version of our web app for their device.\r\n\r\nWe are going to discuss different ways we can view, test, and debug our web app in a mobile setting so that we know what we are seeing is what our user is seeing, because sometimes a desktop browser emulating a mobile device just isnâ€™t enough.\r\n",
    "duration": 1434,
    "slug": "optimize-user-experience-for-mobile-devices-and-browsers",
    "lessons_url": "https://egghead.io/api/v1/series/optimize-user-experience-for-mobile-devices-and-browsers/lessons",
    "url": "https://egghead.io/api/v1/series/optimize-user-experience-for-mobile-devices-and-browsers",
    "http_url": "https://egghead.io/courses/optimize-user-experience-for-mobile-devices-and-browsers",
    "path": "/courses/optimize-user-experience-for-mobile-devices-and-browsers",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/thumb/html5.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/full/html5.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/landscape/html5.png",
    "instructor": {
      "id": 105,
      "slug": "rory-smith",
      "full_name": "Rory Smith",
      "first_name": "Rory",
      "last_name": "Smith",
      "twitter": "alan0buchanan",
      "website": "https://github.com/alanbuchanan/",
      "bio": "",
      "bio_short": "Rory is a front end developer from Leeds, UK.",
      "google_plus": "",
      "http_url": "https://egghead.io/instructors/rory-smith",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/105/original/headshot_rory-smith-1.jpg",
      "lessons_url": "https://egghead.io/api/v1/instructors/rory-smith/lessons",
      "published_lessons": 24,
      "published_courses": 1
    }
  },
  "download_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/signed_download",
  "video_processing_status": "completed",
  "media_urls": {
    "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-use-sticky-positioning-for-section-headers-8232c304d7/egghead-use-sticky-positioning-for-section-headers-8232c304d7.m3u8",
    "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-use-sticky-positioning-for-section-headers-8232c304d7/egghead-use-sticky-positioning-for-section-headers-8232c304d7.mpd"
  },
  "code": {"plunker_url": "https://jsbin.com/secapew/edit?html,css,js,output"},
  "cancel_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/cancel",
  "forfeit_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/forfeit",
  "reject_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/reject",
  "approve_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/approve",
  "upload_lesson_http_url": "https://egghead.io/lesson_uploads/new?lesson=html-5-use-sticky-positioning-for-section-headers&upload=true",
  "edit_lesson_http_url": "https://egghead.io/lessons/html-5-use-sticky-positioning-for-section-headers/edit",
  "update_lesson_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers",
  "process_lesson_video_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/upload",
  "signed_s3_upload_url": "https://egghead.io/api/v1/s3/sign",
  "create_lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags",
  "lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags/html-5-use-sticky-positioning-for-section-headers",
  "new_comment_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/comments"
}, {
  "completed": false,
  "toggle_favorite_lesson_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/favorites/toggle",
  "toggle_like_lesson_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/likes/toggle",
  "lesson_view_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/views",
  "favorited": false,
  "liked": false,
  "id": 3104,
  "creator_id": 135052,
  "slug": "puppeteer-get-a-page-s-load-time-with-puppeteer",
  "title": "Get a Page's Load Time with Puppeteer",
  "state": "approved",
  "summary": "In this lesson we are going to use Google's Puppeteer to gather metrics about a page's load time. We'll use a high level date subtraction method as well as gather data from the window performance timing. Then see how throttling the network to 3G affects the page's load time. ",
  "duration": 179,
  "old_technology": null,
  "plays_count": 0,
  "published_at": null,
  "is_pro_content": false,
  "difficulty_rating": 0,
  "series_row_order_position": null,
  "free_forever": false,
  "transcript": "Instructor: [00:00] The first thing we need to do is install Puppeteer. Then inside of our file where we're using Puppeteer, we need to require it. I've made this function, getPageMetrics, which is async. The first thing we do is create a browser instance.\r\n\r\n[00:14] With headless as false, it means that we're going to be able to see our Chromium browser open, and walk through the steps that we tell it to. Next, we'll create a new page off of our browser. We'll navigate to google.com, and then close the browser.\r\n\r\n[00:30] The quickest way to get our page load time would be const tick equals date.now, then const log, \"page load took,\" date.now minus tick, \"ms.\" We're simply waiting for page.goTo to resolve, and then comparing the two dates together.\r\n\r\n[00:50] When we run this in our terminal, we can see our browser open, and see that it takes 1,125 milliseconds to load the page. Now, if we wanted to get an even more exact time than this, we can do const perf equals await, page.evaluate. Then we'll destructure, load event in, and navigate start from performance timing.\r\n\r\n[01:14] We'll return an object with a load time property, where we'll minus load event in and navigation start. We'll console.log, \"page load took,\" perf.loadTime, \"ms.\" This page.evaluate is how we can run a given function inside a page's context.\r\n\r\n[01:37] We grab the load event in and navigation start metrics from the windows performance timing results, and subtract them together. Now, if we rerun this file, we'll see that we have two console.logs, and the second one is a little bit more accurate.\r\n\r\n[01:55] Now, something else we can do is replicate slower network conditions, and see how that affects our page load. We'll do await, page.wait for 1,000, and await page client send, network emulate network conditions.\r\n\r\n[02:10] Then we'll send an object, offline false, latency 200, downloading throughput 780 times 1024 divided by 8, upload 330 times 1024 divided by 8. Perfect. We're sending this dev tool protocol command, emulate network conditions, as well as an object that replicates the configuration of a 3G connection.\r\n\r\n[02:35] Then this page.wait for 1,000 is to make sure that our page's context has resolved completely before sending our network condition. Now, when we rerun our file, we'll notice that it takes much longer than before, and our load times are now in the 5,000 millisecond range.",
  "lesson_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer",
  "url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer",
  "path": "/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer",
  "http_url": "https://egghead.io/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer",
  "tag_list": ["free"],
  "library_list": ["puppeteer"],
  "language_list": ["javascript"],
  "framework_list": [],
  "tool_list": [],
  "platform_list": ["chrome"],
  "skillset_list": [],
  "skill_level_list": [],
  "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/039/thumb/chromelogo.png",
  "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-get-a-page-s-load-time-with-puppeteer-SkHk-y7Uz/egghead-get-a-page-s-load-time-with-puppeteer-SkHk-y7Uz.jpg",
  "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/213/landscape/puppeteer.png",
  "transcript_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/transcript",
  "subtitles_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/subtitles",
  "related_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/related",
  "comments_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/comments",
  "lesson_errata": [],
  "is_pro": false,
  "primary_tag": {
    "name": "puppeteer",
    "slug": "puppeteer",
    "label": "Puppeteer",
    "context": "libraries",
    "description": "Puppeteer is a Node library which provides a high-level API to control headless Chrome or Chromium over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome or Chromium.",
    "url": "https://egghead.io/api/v1/tags/puppeteer",
    "http_url": "https://egghead.io/browse/libraries/puppeteer"
  },
  "tags": [{
    "name": "puppeteer",
    "slug": "puppeteer",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/213/thumb/puppeteer.png",
    "label": "Puppeteer",
    "context": "libraries",
    "description": "Puppeteer is a Node library which provides a high-level API to control headless Chrome or Chromium over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome or Chromium.",
    "url": "https://egghead.io/api/v1/tags/puppeteer",
    "http_url": "https://egghead.io/browse/libraries/puppeteer"
  }, {
    "name": "javascript",
    "slug": "javascript",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
    "label": "JavaScript",
    "context": "languages",
    "description": "JavaScriptÂ® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
    "url": "https://egghead.io/api/v1/tags/javascript",
    "http_url": "https://egghead.io/browse/libraries/puppeteer"
  }, {
    "name": "chrome",
    "slug": "chrome",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/039/thumb/chromelogo.png",
    "label": "Chrome",
    "context": "platforms",
    "description": "A modern web browser owned and maintained by Google.",
    "url": "https://egghead.io/api/v1/tags/chrome",
    "http_url": "https://egghead.io/browse/libraries/puppeteer"
  }],
  "instructor_url": "https://egghead.io/api/v1/instructors/tyler-clark",
  "instructor": {
    "id": 167,
    "slug": "tyler-clark",
    "full_name": "Tyler Clark",
    "first_name": "Tyler",
    "last_name": "Clark",
    "twitter": "iamtylerwclark",
    "website": "https://medium.com/@tylerwclark",
    "bio": "",
    "bio_short": "Full-Stack Dev with a Front-end Focus, Dad, Husband, Tech Blogger, Speaker, and Teacher, Sports Fanatic",
    "google_plus": "",
    "http_url": "https://egghead.io/instructors/tyler-clark",
    "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/167/original/Tyler.jpg",
    "lessons_url": "https://egghead.io/api/v1/instructors/tyler-clark/lessons",
    "published_lessons": 9,
    "published_courses": 1
  },
  "download_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/signed_download",
  "video_processing_status": "completed",
  "media_urls": {
    "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/puppeteer-get-a-page-s-load-time-with-puppeteer-365cd35174/puppeteer-get-a-page-s-load-time-with-puppeteer-365cd35174.m3u8",
    "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/puppeteer-get-a-page-s-load-time-with-puppeteer-365cd35174/puppeteer-get-a-page-s-load-time-with-puppeteer-365cd35174.mpd"
  },
  "code": {"github": {"repo": "puppeteer-page-metrics", "user": "twclark0", "branch": "master"}},
  "cancel_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/cancel",
  "reject_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/reject",
  "publish_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/publish",
  "upload_lesson_http_url": "https://egghead.io/lesson_uploads/new?lesson=puppeteer-get-a-page-s-load-time-with-puppeteer&upload=true",
  "edit_lesson_http_url": "https://egghead.io/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/edit",
  "update_lesson_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer",
  "process_lesson_video_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/upload",
  "signed_s3_upload_url": "https://egghead.io/api/v1/s3/sign",
  "create_lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags",
  "lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags/puppeteer-get-a-page-s-load-time-with-puppeteer",
  "new_comment_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/comments"
}, {
  "completed": false,
  "toggle_favorite_lesson_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/favorites/toggle",
  "toggle_like_lesson_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/likes/toggle",
  "lesson_view_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/views",
  "favorited": false,
  "liked": false,
  "id": 2934,
  "creator_id": 28751,
  "slug": "elm-understand-elm-decoders-and-the-decodestring-function",
  "title": "Understand Elm Decoders and the `decodeString` Function",
  "state": "approved",
  "summary": "Decoding in Elm is a 2-step business: you first set up a `Decoder`, which represents the structure of the JSON you're going to decode; then, you _run_ the decoder by passing it to the `decodeString` function, along with the JSON to be decoded.\n",
  "duration": 155,
  "old_technology": null,
  "plays_count": 0,
  "published_at": null,
  "is_pro_content": false,
  "difficulty_rating": 0,
  "series_row_order_position": null,
  "free_forever": false,
  "transcript": "Instructor: [00:00] When you're trying to understand the library in Elm, it's always good to look at the types. Let me just open the Elm repo, and let me import json.decode. Now, we can start to have a look at some of these values.\n\n[00:13] Let's see int. This int that we're using here lives in the json.decode package. You can see that this is a decoder of int. String, that's a decoder of string. Bool, as you might have guessed, is a decoder of bool. These are all decoders.\n\n[00:35] When you create an expression like this, let's see what the type for that will be. The repo tells us that that's also a decoder of int. Let's look at the type for userDecoder. Here, I have a plug-in that's offering me to add a type annotation, this is a decoder of user.\n\n[00:54] Essentially, everything is a decoder. You start from these simple, primitive decoders for ints and strings. From those, you build up decoders for more complex values. We now know that decoders compose somewhat like Legos, but how do you actually decode a value?\n\n[01:11] The idea is that we need to go from a decoder of A into a value of type A. Of course, we also need another input parameter. That will be the JSON that we're decoding. The result might not always be an A, because we might be giving some JSON that is in the incorrect format. What we would actually get is a result of, say, string A.\n\n[01:36] This is now beginning to look like a function signature. Indeed, when we look at the functions that actually perform the decoding, this is the signature we find. We have a decoder of A, a string -- if our JSON is in string -- a we get a result wrapped in the decoded A.\n\n[01:52] DecodeString is the main function that we are going to use to decode JSON, but there's a similar function, decodeValue, that's useful when working with ports. There are a couple of important observations.\n\n[02:04] The first is that decoding is not done in the decoder. It's done in the decodeString. What the decoder does is it contains information about what JSON is being passed and how it can be decoded. The second point is that, as a developer, you don't actually have to do the decoding. What you need to do is provide an appropriate decoder.\n\n[02:25] If we go back to our previous example, you see here there's an example of calling decodeString with userDecoder as a decoder and this string here as the JSON.",
  "lesson_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function",
  "url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function",
  "path": "/lessons/elm-understand-elm-decoders-and-the-decodestring-function",
  "http_url": "https://egghead.io/lessons/elm-understand-elm-decoders-and-the-decodestring-function",
  "tag_list": ["free"],
  "library_list": [],
  "language_list": ["elm"],
  "framework_list": [],
  "tool_list": [],
  "platform_list": [],
  "skillset_list": [],
  "skill_level_list": [],
  "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/thumb/elm.png",
  "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-understand-elm-decoders-and-the-decodestring-function-HyfvdAX4z/egghead-understand-elm-decoders-and-the-decodestring-function-HyfvdAX4z.jpg",
  "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/landscape/elm.png",
  "transcript_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/transcript",
  "subtitles_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/subtitles",
  "related_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/related",
  "comments_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/comments",
  "lesson_errata": [],
  "is_pro": false,
  "primary_tag": {
    "name": "elm",
    "slug": "elm",
    "label": "Elm",
    "context": "languages",
    "description": "Elm is a programming language that provides a clean functional syntax for writing HTML web applications. It promises zero runtime exceptions, fast rendering, time-travel debugging, and much more.",
    "url": "https://egghead.io/api/v1/tags/elm",
    "http_url": "https://egghead.io/browse/languages/elm"
  },
  "tags": [{
    "name": "elm",
    "slug": "elm",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/thumb/elm.png",
    "label": "Elm",
    "context": "languages",
    "description": "Elm is a programming language that provides a clean functional syntax for writing HTML web applications. It promises zero runtime exceptions, fast rendering, time-travel debugging, and much more.",
    "url": "https://egghead.io/api/v1/tags/elm",
    "http_url": "https://egghead.io/browse/languages/elm"
  }],
  "instructor_url": "https://egghead.io/api/v1/instructors/enrico-buonanno",
  "instructor": {
    "id": 150,
    "slug": "enrico-buonanno",
    "full_name": "Enrico Buonanno",
    "first_name": "Enrico",
    "last_name": "Buonanno",
    "twitter": "la_yumba",
    "website": "https://github.com/la-yumba/",
    "bio": "",
    "bio_short": "I obtained an MS in Computer Science at Columbia University in 2001 and have been working as a software developer and architect since. I worked in FinTech, online auctions and other areas, using a number of different languages and technologies. I wrote a book on Functional Programming in C# with Manning.",
    "google_plus": "",
    "http_url": "https://egghead.io/instructors/enrico-buonanno",
    "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/150/original/IMG_0185.jpg",
    "lessons_url": "https://egghead.io/api/v1/instructors/enrico-buonanno/lessons",
    "published_lessons": 16,
    "published_courses": 1
  },
  "series_url": "https://egghead.io/api/v1/series/decode-json-into-elm",
  "series_row_order": 6029312,
  "series": {
    "title": "Decode JSON into Elm",
    "description": "Any non-trivial Elm app will have a need to translate between JSON and Elm, as the Elm app communicates with JavaScript libraries through ports, or consumes JSON from a server API. \r\nElm has the important and somewhat intimidating concept of \"decoders\" that translate dynamically typed JSON into statically typed Elm values. This course will teach you to write your decoders and tackle many common decoding scenarios, including optional and nullable fields, decoding into union types, and decoding recursive structures.",
    "duration": 3057,
    "slug": "decode-json-into-elm",
    "lessons_url": "https://egghead.io/api/v1/series/decode-json-into-elm/lessons",
    "url": "https://egghead.io/api/v1/series/decode-json-into-elm",
    "http_url": "https://egghead.io/courses/decode-json-into-elm",
    "path": "/courses/decode-json-into-elm",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/thumb/EGH_ElmDecoder.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/full/EGH_ElmDecoder.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/landscape/EGH_ElmDecoder.png",
    "instructor": {
      "id": 150,
      "slug": "enrico-buonanno",
      "full_name": "Enrico Buonanno",
      "first_name": "Enrico",
      "last_name": "Buonanno",
      "twitter": "la_yumba",
      "website": "https://github.com/la-yumba/",
      "bio": "",
      "bio_short": "I obtained an MS in Computer Science at Columbia University in 2001 and have been working as a software developer and architect since. I worked in FinTech, online auctions and other areas, using a number of different languages and technologies. I wrote a book on Functional Programming in C# with Manning.",
      "google_plus": "",
      "http_url": "https://egghead.io/instructors/enrico-buonanno",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/150/original/IMG_0185.jpg",
      "lessons_url": "https://egghead.io/api/v1/instructors/enrico-buonanno/lessons",
      "published_lessons": 16,
      "published_courses": 1
    }
  },
  "download_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/signed_download",
  "video_processing_status": "completed",
  "media_urls": {
    "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-understand-elm-decoders-and-the-decodestring-function-c334b2f88c/egghead-understand-elm-decoders-and-the-decodestring-function-c334b2f88c.m3u8",
    "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-understand-elm-decoders-and-the-decodestring-function-c334b2f88c/egghead-understand-elm-decoders-and-the-decodestring-function-c334b2f88c.mpd"
  },
  "cancel_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/cancel",
  "reject_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/reject",
  "publish_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/publish",
  "upload_lesson_http_url": "https://egghead.io/lesson_uploads/new?lesson=elm-understand-elm-decoders-and-the-decodestring-function&upload=true",
  "edit_lesson_http_url": "https://egghead.io/lessons/elm-understand-elm-decoders-and-the-decodestring-function/edit",
  "update_lesson_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function",
  "process_lesson_video_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/upload",
  "signed_s3_upload_url": "https://egghead.io/api/v1/s3/sign",
  "create_lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags",
  "lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags/elm-understand-elm-decoders-and-the-decodestring-function",
  "new_comment_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/comments"
}]