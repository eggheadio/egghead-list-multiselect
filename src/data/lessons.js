export default [{
  "completed": false,
  "toggle_favorite_lesson_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/favorites/toggle",
  "toggle_like_lesson_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/likes/toggle",
  "lesson_view_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/views",
  "favorited": false,
  "liked": false,
  "id": 3122,
  "creator_id": 44680,
  "slug": "html-5-use-sticky-positioning-for-section-headers",
  "title": "Use sticky positioning for section headers",
  "state": "submitted",
  "summary": "We can take advantage of sticky positioning to keep a section header at the top of the page while the user scrolls. This is useful for neat categorisation of sections on the page.",
  "duration": 201,
  "old_technology": null,
  "plays_count": 0,
  "published_at": null,
  "is_pro_content": false,
  "difficulty_rating": 0,
  "series_row_order_position": null,
  "free_forever": false,
  "transcript": "",
  "lesson_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers",
  "url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers",
  "path": "/lessons/html-5-use-sticky-positioning-for-section-headers",
  "http_url": "https://egghead.io/lessons/html-5-use-sticky-positioning-for-section-headers",
  "tag_list": ["free"],
  "library_list": [],
  "language_list": ["css", "html"],
  "framework_list": [],
  "tool_list": [],
  "platform_list": [],
  "skillset_list": [],
  "skill_level_list": [],
  "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/175/thumb/csslang.png",
  "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-use-sticky-positioning-for-section-headers-S1Oc29VIz/egghead-use-sticky-positioning-for-section-headers-S1Oc29VIz.jpg",
  "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/landscape/html5.png",
  "transcript_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/transcript",
  "related_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/related",
  "comments_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/comments",
  "lesson_errata": [],
  "is_pro": false,
  "primary_tag": {
    "name": "html",
    "slug": "html",
    "label": "HTML 5",
    "context": "languages",
    "description": "HTML 5 is the structure of our web pages. It is the markup that represents the DOM (document object model).",
    "url": "https://egghead.io/api/v1/tags/html",
    "http_url": "https://egghead.io/browse/languages/html"
  },
  "tags": [{
    "name": "html",
    "slug": "html",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/thumb/html5.png",
    "label": "HTML 5",
    "context": "languages",
    "description": "HTML 5 is the structure of our web pages. It is the markup that represents the DOM (document object model).",
    "url": "https://egghead.io/api/v1/tags/html",
    "http_url": "https://egghead.io/browse/languages/html"
  }, {
    "name": "css",
    "slug": "css",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/175/thumb/csslang.png",
    "label": "CSS",
    "context": "languages",
    "description": "Cascading Style Sheets bring order and beauty to our applications.",
    "url": "https://egghead.io/api/v1/tags/css",
    "http_url": "https://egghead.io/browse/languages/html"
  }],
  "instructor_url": "https://egghead.io/api/v1/instructors/rory-smith",
  "instructor": {
    "id": 105,
    "slug": "rory-smith",
    "full_name": "Rory Smith",
    "first_name": "Rory",
    "last_name": "Smith",
    "twitter": "alan0buchanan",
    "website": "https://github.com/alanbuchanan/",
    "bio": "",
    "bio_short": "Rory is a front end developer from Leeds, UK.",
    "google_plus": "",
    "http_url": "https://egghead.io/instructors/rory-smith",
    "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/105/original/headshot_rory-smith-1.jpg",
    "lessons_url": "https://egghead.io/api/v1/instructors/rory-smith/lessons",
    "published_lessons": 24,
    "published_courses": 1
  },
  "series_url": "https://egghead.io/api/v1/series/optimize-user-experience-for-mobile-devices-and-browsers",
  "series_row_order": 8306688,
  "series": {
    "title": "Optimize User Experience for mobile devices and browsers",
    "description": "A lot of the time, web apps are built primarily with the desktop layout in consideration, and the mobile layout suffers as a result. In this course we are going to discuss using features of user interface which are optimised for mobile devices.\r\n\r\nWe are going to discuss CSS features that make a big difference and build entire components that work great on mobile devices and browsers. We are going to take into account browser support to ensure our users are getting the experience we want them to.\r\n\r\nMore and more of our users depend on their mobile device to use our web apps. With this in mind, we are going to look at how to optimise the components we build for smaller viewports, and how to ensure our customer gets an optimised version of our web app for their device.\r\n\r\nWe are going to discuss different ways we can view, test, and debug our web app in a mobile setting so that we know what we are seeing is what our user is seeing, because sometimes a desktop browser emulating a mobile device just isn’t enough.\r\n",
    "duration": 1434,
    "slug": "optimize-user-experience-for-mobile-devices-and-browsers",
    "lessons_url": "https://egghead.io/api/v1/series/optimize-user-experience-for-mobile-devices-and-browsers/lessons",
    "url": "https://egghead.io/api/v1/series/optimize-user-experience-for-mobile-devices-and-browsers",
    "http_url": "https://egghead.io/courses/optimize-user-experience-for-mobile-devices-and-browsers",
    "path": "/courses/optimize-user-experience-for-mobile-devices-and-browsers",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/thumb/html5.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/full/html5.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/landscape/html5.png",
    "instructor": {
      "id": 105,
      "slug": "rory-smith",
      "full_name": "Rory Smith",
      "first_name": "Rory",
      "last_name": "Smith",
      "twitter": "alan0buchanan",
      "website": "https://github.com/alanbuchanan/",
      "bio": "",
      "bio_short": "Rory is a front end developer from Leeds, UK.",
      "google_plus": "",
      "http_url": "https://egghead.io/instructors/rory-smith",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/105/original/headshot_rory-smith-1.jpg",
      "lessons_url": "https://egghead.io/api/v1/instructors/rory-smith/lessons",
      "published_lessons": 24,
      "published_courses": 1
    }
  },
  "download_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/signed_download",
  "video_processing_status": "completed",
  "media_urls": {
    "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-use-sticky-positioning-for-section-headers-8232c304d7/egghead-use-sticky-positioning-for-section-headers-8232c304d7.m3u8",
    "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-use-sticky-positioning-for-section-headers-8232c304d7/egghead-use-sticky-positioning-for-section-headers-8232c304d7.mpd"
  },
  "code": {"plunker_url": "https://jsbin.com/secapew/edit?html,css,js,output"},
  "cancel_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/cancel",
  "forfeit_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/forfeit",
  "reject_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/reject",
  "approve_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/approve",
  "upload_lesson_http_url": "https://egghead.io/lesson_uploads/new?lesson=html-5-use-sticky-positioning-for-section-headers&upload=true",
  "edit_lesson_http_url": "https://egghead.io/lessons/html-5-use-sticky-positioning-for-section-headers/edit",
  "update_lesson_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers",
  "process_lesson_video_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/upload",
  "signed_s3_upload_url": "https://egghead.io/api/v1/s3/sign",
  "create_lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags",
  "lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags/html-5-use-sticky-positioning-for-section-headers",
  "new_comment_url": "https://egghead.io/api/v1/lessons/html-5-use-sticky-positioning-for-section-headers/comments"
}, {
  "completed": false,
  "toggle_favorite_lesson_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/favorites/toggle",
  "toggle_like_lesson_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/likes/toggle",
  "lesson_view_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/views",
  "favorited": false,
  "liked": false,
  "id": 3104,
  "creator_id": 135052,
  "slug": "puppeteer-get-a-page-s-load-time-with-puppeteer",
  "title": "Get a Page's Load Time with Puppeteer",
  "state": "approved",
  "summary": "In this lesson we are going to use Google's Puppeteer to gather metrics about a page's load time. We'll use a high level date subtraction method as well as gather data from the window performance timing. Then see how throttling the network to 3G affects the page's load time. ",
  "duration": 179,
  "old_technology": null,
  "plays_count": 0,
  "published_at": null,
  "is_pro_content": false,
  "difficulty_rating": 0,
  "series_row_order_position": null,
  "free_forever": false,
  "transcript": "Instructor: [00:00] The first thing we need to do is install Puppeteer. Then inside of our file where we're using Puppeteer, we need to require it. I've made this function, getPageMetrics, which is async. The first thing we do is create a browser instance.\r\n\r\n[00:14] With headless as false, it means that we're going to be able to see our Chromium browser open, and walk through the steps that we tell it to. Next, we'll create a new page off of our browser. We'll navigate to google.com, and then close the browser.\r\n\r\n[00:30] The quickest way to get our page load time would be const tick equals date.now, then const log, \"page load took,\" date.now minus tick, \"ms.\" We're simply waiting for page.goTo to resolve, and then comparing the two dates together.\r\n\r\n[00:50] When we run this in our terminal, we can see our browser open, and see that it takes 1,125 milliseconds to load the page. Now, if we wanted to get an even more exact time than this, we can do const perf equals await, page.evaluate. Then we'll destructure, load event in, and navigate start from performance timing.\r\n\r\n[01:14] We'll return an object with a load time property, where we'll minus load event in and navigation start. We'll console.log, \"page load took,\" perf.loadTime, \"ms.\" This page.evaluate is how we can run a given function inside a page's context.\r\n\r\n[01:37] We grab the load event in and navigation start metrics from the windows performance timing results, and subtract them together. Now, if we rerun this file, we'll see that we have two console.logs, and the second one is a little bit more accurate.\r\n\r\n[01:55] Now, something else we can do is replicate slower network conditions, and see how that affects our page load. We'll do await, page.wait for 1,000, and await page client send, network emulate network conditions.\r\n\r\n[02:10] Then we'll send an object, offline false, latency 200, downloading throughput 780 times 1024 divided by 8, upload 330 times 1024 divided by 8. Perfect. We're sending this dev tool protocol command, emulate network conditions, as well as an object that replicates the configuration of a 3G connection.\r\n\r\n[02:35] Then this page.wait for 1,000 is to make sure that our page's context has resolved completely before sending our network condition. Now, when we rerun our file, we'll notice that it takes much longer than before, and our load times are now in the 5,000 millisecond range.",
  "lesson_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer",
  "url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer",
  "path": "/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer",
  "http_url": "https://egghead.io/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer",
  "tag_list": ["free"],
  "library_list": ["puppeteer"],
  "language_list": ["javascript"],
  "framework_list": [],
  "tool_list": [],
  "platform_list": ["chrome"],
  "skillset_list": [],
  "skill_level_list": [],
  "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/039/thumb/chromelogo.png",
  "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-get-a-page-s-load-time-with-puppeteer-SkHk-y7Uz/egghead-get-a-page-s-load-time-with-puppeteer-SkHk-y7Uz.jpg",
  "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/213/landscape/puppeteer.png",
  "transcript_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/transcript",
  "subtitles_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/subtitles",
  "related_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/related",
  "comments_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/comments",
  "lesson_errata": [],
  "is_pro": false,
  "primary_tag": {
    "name": "puppeteer",
    "slug": "puppeteer",
    "label": "Puppeteer",
    "context": "libraries",
    "description": "Puppeteer is a Node library which provides a high-level API to control headless Chrome or Chromium over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome or Chromium.",
    "url": "https://egghead.io/api/v1/tags/puppeteer",
    "http_url": "https://egghead.io/browse/libraries/puppeteer"
  },
  "tags": [{
    "name": "puppeteer",
    "slug": "puppeteer",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/213/thumb/puppeteer.png",
    "label": "Puppeteer",
    "context": "libraries",
    "description": "Puppeteer is a Node library which provides a high-level API to control headless Chrome or Chromium over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome or Chromium.",
    "url": "https://egghead.io/api/v1/tags/puppeteer",
    "http_url": "https://egghead.io/browse/libraries/puppeteer"
  }, {
    "name": "javascript",
    "slug": "javascript",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
    "label": "JavaScript",
    "context": "languages",
    "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
    "url": "https://egghead.io/api/v1/tags/javascript",
    "http_url": "https://egghead.io/browse/libraries/puppeteer"
  }, {
    "name": "chrome",
    "slug": "chrome",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/039/thumb/chromelogo.png",
    "label": "Chrome",
    "context": "platforms",
    "description": "A modern web browser owned and maintained by Google.",
    "url": "https://egghead.io/api/v1/tags/chrome",
    "http_url": "https://egghead.io/browse/libraries/puppeteer"
  }],
  "instructor_url": "https://egghead.io/api/v1/instructors/tyler-clark",
  "instructor": {
    "id": 167,
    "slug": "tyler-clark",
    "full_name": "Tyler Clark",
    "first_name": "Tyler",
    "last_name": "Clark",
    "twitter": "iamtylerwclark",
    "website": "https://medium.com/@tylerwclark",
    "bio": "",
    "bio_short": "Full-Stack Dev with a Front-end Focus, Dad, Husband, Tech Blogger, Speaker, and Teacher, Sports Fanatic",
    "google_plus": "",
    "http_url": "https://egghead.io/instructors/tyler-clark",
    "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/167/original/Tyler.jpg",
    "lessons_url": "https://egghead.io/api/v1/instructors/tyler-clark/lessons",
    "published_lessons": 9,
    "published_courses": 1
  },
  "download_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/signed_download",
  "video_processing_status": "completed",
  "media_urls": {
    "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/puppeteer-get-a-page-s-load-time-with-puppeteer-365cd35174/puppeteer-get-a-page-s-load-time-with-puppeteer-365cd35174.m3u8",
    "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/puppeteer-get-a-page-s-load-time-with-puppeteer-365cd35174/puppeteer-get-a-page-s-load-time-with-puppeteer-365cd35174.mpd"
  },
  "code": {"github": {"repo": "puppeteer-page-metrics", "user": "twclark0", "branch": "master"}},
  "cancel_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/cancel",
  "reject_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/reject",
  "publish_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/publish",
  "upload_lesson_http_url": "https://egghead.io/lesson_uploads/new?lesson=puppeteer-get-a-page-s-load-time-with-puppeteer&upload=true",
  "edit_lesson_http_url": "https://egghead.io/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/edit",
  "update_lesson_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer",
  "process_lesson_video_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/upload",
  "signed_s3_upload_url": "https://egghead.io/api/v1/s3/sign",
  "create_lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags",
  "lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags/puppeteer-get-a-page-s-load-time-with-puppeteer",
  "new_comment_url": "https://egghead.io/api/v1/lessons/puppeteer-get-a-page-s-load-time-with-puppeteer/comments"
}, {
  "completed": false,
  "toggle_favorite_lesson_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/favorites/toggle",
  "toggle_like_lesson_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/likes/toggle",
  "lesson_view_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/views",
  "favorited": false,
  "liked": false,
  "id": 2952,
  "creator_id": 28751,
  "slug": "elm-use-andthen-to-transform-data-while-decoding-json-into-elm",
  "title": "Use `andThen` to transform data while decoding JSON into Elm",
  "state": "approved",
  "summary": "Some data transformations can be obtained by \"tagging on\" a function to a decoder with `map`. But if the transformation may fail, then we need a different approach: express failure in terms of decoding (if the transformation fails, decoding fails), and then tag this `Decoder`-returning function on to the previous `Decoder` with `andThen`. This is functional programming's good old `bind`, particularized for the `Decoder` type.",
  "duration": 252,
  "old_technology": null,
  "plays_count": 0,
  "published_at": null,
  "is_pro_content": false,
  "difficulty_rating": 0,
  "series_row_order_position": null,
  "free_forever": false,
  "transcript": "Instructor: [00:01] Let's imagine we now need an additional field that indicates the user's gender. In our JSON, this would be the string \"male\" or \"female.\" Let me update my model in Elm, and I'll add a field to my user type alias.\r\n\r\n[00:24] In my decoder, I need to use map4, because I have an additional field. Let me add the field here. The name of the field in the JSON is gender. I'll use gender, a new decoder that I write. I expect that this would be fairly similar to our decoder for membership, so let me just duplicate that, and now make the necessary changes.\r\n\r\n[00:51] Let me call this value gender and its type is decoder of gender. Rather than starting with bool, I'll start with string, and then I'll map a function toGender, which I define here, and the type of toGender should be string to gender.\r\n\r\n[01:33] Let's see if that works. It doesn't work, because my pattern matching is not exhaustive. There are infinitely many more strings than indicated for. What if I get another string that is not male or female? Then, I don't really know what to do. In other words, the decoding should really fail here.\r\n\r\n[01:52] What I need to do now is to change the signature here. I cannot go from just any string to gender, but I can go from a string to a decoder of gender. If I get string male, I can succeed with male. Succeed is a function that returns a decoder that always succeeds with the given value.\r\n\r\n[02:15] Here, I can succeed with female. Here, I'll fail with an error message. Fail returns a decoder that always fails with the given message. Let me try [inaudible] now. Now, I have a type mismatch, because string map with this function that returns a decoder, now returns a decoder of a decoder of gender.\r\n\r\n[02:44] To flatten this decoder of a decoder into a single decoder, I need to use another function that's called andThen. If I say now, you see that everything works nicely, and my decoded user has a gender field with the value set to male.\r\n\r\n[03:02] It's important to look at the difference. In the case of membership, we were able to use map, because we were mapping a function from bool to membership. In the case of gender, we were not able to write a function from string to gender, so we had to write a function from string to a decoder of gender. These two need to be glued together with andThen, rather than map.\r\n\r\n[03:22] It can be useful to look at the repo or at the documentation and compare the signatures of map with the signature for andThen. You see it's essentially the same, but here we have a function from A to B, or rather from A to value, and here we have a function from A to a decoder of B. The rest is the same.\r\n\r\n[03:47] You see exactly the same pattern with other types. For example, if you compare a maybe.map with maybe.andThen, again, here we have a function from A to B, and here function from A to the maybe of B. Of course, in functional programming, functions with this sort of signatures would be called bind.",
  "lesson_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm",
  "url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm",
  "path": "/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm",
  "http_url": "https://egghead.io/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm",
  "tag_list": ["free"],
  "library_list": [],
  "language_list": ["elm"],
  "framework_list": [],
  "tool_list": [],
  "platform_list": [],
  "skillset_list": [],
  "skill_level_list": [],
  "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/thumb/elm.png",
  "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-use-andthen-to-transform-data-while-decoding-json-into-elm-BJH6GVBNz/egghead-use-andthen-to-transform-data-while-decoding-json-into-elm-BJH6GVBNz.jpg",
  "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/landscape/elm.png",
  "transcript_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/transcript",
  "subtitles_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/subtitles",
  "related_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/related",
  "comments_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/comments",
  "lesson_errata": [],
  "is_pro": false,
  "primary_tag": {
    "name": "elm",
    "slug": "elm",
    "label": "Elm",
    "context": "languages",
    "description": "Elm is a programming language that provides a clean functional syntax for writing HTML web applications. It promises zero runtime exceptions, fast rendering, time-travel debugging, and much more.",
    "url": "https://egghead.io/api/v1/tags/elm",
    "http_url": "https://egghead.io/browse/languages/elm"
  },
  "tags": [{
    "name": "elm",
    "slug": "elm",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/thumb/elm.png",
    "label": "Elm",
    "context": "languages",
    "description": "Elm is a programming language that provides a clean functional syntax for writing HTML web applications. It promises zero runtime exceptions, fast rendering, time-travel debugging, and much more.",
    "url": "https://egghead.io/api/v1/tags/elm",
    "http_url": "https://egghead.io/browse/languages/elm"
  }],
  "instructor_url": "https://egghead.io/api/v1/instructors/enrico-buonanno",
  "instructor": {
    "id": 150,
    "slug": "enrico-buonanno",
    "full_name": "Enrico Buonanno",
    "first_name": "Enrico",
    "last_name": "Buonanno",
    "twitter": "la_yumba",
    "website": "https://github.com/la-yumba/",
    "bio": "",
    "bio_short": "I obtained an MS in Computer Science at Columbia University in 2001 and have been working as a software developer and architect since. I worked in FinTech, online auctions and other areas, using a number of different languages and technologies. I wrote a book on Functional Programming in C# with Manning.",
    "google_plus": "",
    "http_url": "https://egghead.io/instructors/enrico-buonanno",
    "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/150/original/IMG_0185.jpg",
    "lessons_url": "https://egghead.io/api/v1/instructors/enrico-buonanno/lessons",
    "published_lessons": 16,
    "published_courses": 1
  },
  "series_url": "https://egghead.io/api/v1/series/decode-json-into-elm",
  "series_row_order": 7667712,
  "series": {
    "title": "Decode JSON into Elm",
    "description": "Any non-trivial Elm app will have a need to translate between JSON and Elm, as the Elm app communicates with JavaScript libraries through ports, or consumes JSON from a server API. \r\nElm has the important and somewhat intimidating concept of \"decoders\" that translate dynamically typed JSON into statically typed Elm values. This course will teach you to write your decoders and tackle many common decoding scenarios, including optional and nullable fields, decoding into union types, and decoding recursive structures.",
    "duration": 3057,
    "slug": "decode-json-into-elm",
    "lessons_url": "https://egghead.io/api/v1/series/decode-json-into-elm/lessons",
    "url": "https://egghead.io/api/v1/series/decode-json-into-elm",
    "http_url": "https://egghead.io/courses/decode-json-into-elm",
    "path": "/courses/decode-json-into-elm",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/thumb/EGH_ElmDecoder.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/full/EGH_ElmDecoder.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/landscape/EGH_ElmDecoder.png",
    "instructor": {
      "id": 150,
      "slug": "enrico-buonanno",
      "full_name": "Enrico Buonanno",
      "first_name": "Enrico",
      "last_name": "Buonanno",
      "twitter": "la_yumba",
      "website": "https://github.com/la-yumba/",
      "bio": "",
      "bio_short": "I obtained an MS in Computer Science at Columbia University in 2001 and have been working as a software developer and architect since. I worked in FinTech, online auctions and other areas, using a number of different languages and technologies. I wrote a book on Functional Programming in C# with Manning.",
      "google_plus": "",
      "http_url": "https://egghead.io/instructors/enrico-buonanno",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/150/original/IMG_0185.jpg",
      "lessons_url": "https://egghead.io/api/v1/instructors/enrico-buonanno/lessons",
      "published_lessons": 16,
      "published_courses": 1
    }
  },
  "download_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/signed_download",
  "video_processing_status": "completed",
  "media_urls": {
    "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-use-andthen-to-transform-data-while-decoding-json-into-elm-79473aca63/egghead-use-andthen-to-transform-data-while-decoding-json-into-elm-79473aca63.m3u8",
    "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-use-andthen-to-transform-data-while-decoding-json-into-elm-79473aca63/egghead-use-andthen-to-transform-data-while-decoding-json-into-elm-79473aca63.mpd"
  },
  "code": {"plunker_url": "https://ellie-app.com/embed/dVD8bdQ5Na1/3"},
  "cancel_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/cancel",
  "reject_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/reject",
  "publish_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/publish",
  "upload_lesson_http_url": "https://egghead.io/lesson_uploads/new?lesson=elm-use-andthen-to-transform-data-while-decoding-json-into-elm&upload=true",
  "edit_lesson_http_url": "https://egghead.io/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/edit",
  "update_lesson_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm",
  "process_lesson_video_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/upload",
  "signed_s3_upload_url": "https://egghead.io/api/v1/s3/sign",
  "create_lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags",
  "lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags/elm-use-andthen-to-transform-data-while-decoding-json-into-elm",
  "new_comment_url": "https://egghead.io/api/v1/lessons/elm-use-andthen-to-transform-data-while-decoding-json-into-elm/comments"
}, {
  "completed": false,
  "toggle_favorite_lesson_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity/favorites/toggle",
  "toggle_like_lesson_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity/likes/toggle",
  "lesson_view_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity/views",
  "favorited": false,
  "liked": false,
  "id": 3045,
  "creator_id": 18515,
  "slug": "egghead-write-a-smart-contract-with-solidity",
  "title": "Write A Smart Contract With Solidity",
  "state": "claimed",
  "summary": "We will use the ERC721 standard to create EventToken, a digital ticket that we will exchange for Ether.",
  "duration": null,
  "old_technology": null,
  "plays_count": 0,
  "published_at": null,
  "is_pro_content": false,
  "difficulty_rating": 0,
  "series_row_order_position": null,
  "free_forever": false,
  "transcript": null,
  "lesson_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity",
  "url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity",
  "path": "/lessons/egghead-write-a-smart-contract-with-solidity",
  "http_url": "https://egghead.io/lessons/egghead-write-a-smart-contract-with-solidity",
  "tag_list": ["free"],
  "library_list": [],
  "language_list": [],
  "framework_list": [],
  "tool_list": [],
  "platform_list": [],
  "skillset_list": [],
  "skill_level_list": [],
  "icon_url": "/assets/256egghead-400aab0c7af2cf2909895c8d7ba9d95c.png",
  "thumb_nail": "",
  "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/landscape/eggheadlogo.png",
  "transcript_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity/transcript",
  "related_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity/related",
  "comments_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity/comments",
  "lesson_errata": [],
  "is_pro": false,
  "tags": [],
  "instructor_url": "https://egghead.io/api/v1/instructors/dana-white",
  "instructor": {
    "id": 158,
    "slug": "dana-white",
    "full_name": "Dana White",
    "first_name": "Dana",
    "last_name": "White",
    "twitter": "absolutgenius",
    "website": "http://github.com/danawhite",
    "bio": null,
    "bio_short": "I am an entrepreneur and creative with a passion for technology, sports, music, fashion and photography. I possess varied levels of proficiency in all aspects of software design and development, from Sketch to Docker. Envelope Pusher, Computer Lover, Dot Connector and Lifelong Learner.",
    "google_plus": "",
    "http_url": "https://egghead.io/instructors/dana-white",
    "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/158/original/19225992_10213760948442962_4196692300522500024_n.jpg",
    "lessons_url": "https://egghead.io/api/v1/instructors/dana-white/lessons",
    "published_lessons": 1,
    "published_courses": 0
  },
  "series_url": "https://egghead.io/api/v1/series/build-a-decentralized-application-for-the-ethereum-blockchain-with-reactjs",
  "series_row_order": 8303324,
  "series": {
    "title": "Build a Decentralized Application for the Ethereum Blockchain with ReactJS",
    "description": "In this course we will build a decentralized Ticket Exchange application with ReactJS. Within the application, we will integrate 2 Smart Contracts: one that represents EventToken, a cryptocurrency and that will represent a physical asset.\r\n\r\nWe are going to start by unboxing a custom Truffle Box, a generator that is built on top of  Create React App. \r\n\r\nWe will then import the Smart Contracts into our React application. Along the way, we will reference relevant aspects of Solidity that will provide insight into the way in which Smart Contracts are seamlessly integrated into a React Application.\r\n\r\nUltimately, our application will culminate with that exchange of Tickets for EventCoin. These transactions will be rendered in the app as proof of that they were executed on the blockchain. ",
    "duration": 0,
    "slug": "build-a-decentralized-application-for-the-ethereum-blockchain-with-reactjs",
    "lessons_url": "https://egghead.io/api/v1/series/build-a-decentralized-application-for-the-ethereum-blockchain-with-reactjs/lessons",
    "url": "https://egghead.io/api/v1/series/build-a-decentralized-application-for-the-ethereum-blockchain-with-reactjs",
    "http_url": "https://egghead.io/courses/build-a-decentralized-application-for-the-ethereum-blockchain-with-reactjs",
    "path": "/courses/build-a-decentralized-application-for-the-ethereum-blockchain-with-reactjs",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/thumb/eggheadlogo.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/full/eggheadlogo.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/landscape/eggheadlogo.png",
    "instructor": {
      "id": 158,
      "slug": "dana-white",
      "full_name": "Dana White",
      "first_name": "Dana",
      "last_name": "White",
      "twitter": "absolutgenius",
      "website": "http://github.com/danawhite",
      "bio": null,
      "bio_short": "I am an entrepreneur and creative with a passion for technology, sports, music, fashion and photography. I possess varied levels of proficiency in all aspects of software design and development, from Sketch to Docker. Envelope Pusher, Computer Lover, Dot Connector and Lifelong Learner.",
      "google_plus": "",
      "http_url": "https://egghead.io/instructors/dana-white",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/158/original/19225992_10213760948442962_4196692300522500024_n.jpg",
      "lessons_url": "https://egghead.io/api/v1/instructors/dana-white/lessons",
      "published_lessons": 1,
      "published_courses": 0
    }
  },
  "request_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity/request",
  "cancel_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity/cancel",
  "forfeit_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity/forfeit",
  "approve_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity/approve",
  "upload_lesson_http_url": "https://egghead.io/lesson_uploads/new?lesson=egghead-write-a-smart-contract-with-solidity&upload=true",
  "edit_lesson_http_url": "https://egghead.io/lessons/egghead-write-a-smart-contract-with-solidity/edit",
  "update_lesson_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity",
  "process_lesson_video_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity/upload",
  "signed_s3_upload_url": "https://egghead.io/api/v1/s3/sign",
  "create_lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags",
  "lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags/egghead-write-a-smart-contract-with-solidity",
  "new_comment_url": "https://egghead.io/api/v1/lessons/egghead-write-a-smart-contract-with-solidity/comments"
}, {
  "completed": false,
  "toggle_favorite_lesson_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/favorites/toggle",
  "toggle_like_lesson_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/likes/toggle",
  "lesson_view_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/views",
  "favorited": false,
  "liked": false,
  "id": 3124,
  "creator_id": 44680,
  "slug": "html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices",
  "title": "Use Chrome Developer Tools to emulate different mobile devices",
  "state": "submitted",
  "summary": "Many tools can be utilised in our desktop environment to develop our app for mobile devices. We’ll take a look at some mobile-specific features in Chrome Dev Tools to emulate devices.",
  "duration": 43,
  "old_technology": null,
  "plays_count": 0,
  "published_at": null,
  "is_pro_content": false,
  "difficulty_rating": 0,
  "series_row_order_position": null,
  "free_forever": false,
  "transcript": "",
  "lesson_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices",
  "url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices",
  "path": "/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices",
  "http_url": "https://egghead.io/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices",
  "tag_list": ["free"],
  "library_list": [],
  "language_list": ["css", "html"],
  "framework_list": [],
  "tool_list": [],
  "platform_list": [],
  "skillset_list": [],
  "skill_level_list": [],
  "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/175/thumb/csslang.png",
  "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-use-chrome-developer-tools-to-emulate-different-mobile-devices-HJnKQpELf/egghead-use-chrome-developer-tools-to-emulate-different-mobile-devices-HJnKQpELf.jpg",
  "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/landscape/html5.png",
  "transcript_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/transcript",
  "related_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/related",
  "comments_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/comments",
  "lesson_errata": [],
  "is_pro": false,
  "primary_tag": {
    "name": "html",
    "slug": "html",
    "label": "HTML 5",
    "context": "languages",
    "description": "HTML 5 is the structure of our web pages. It is the markup that represents the DOM (document object model).",
    "url": "https://egghead.io/api/v1/tags/html",
    "http_url": "https://egghead.io/browse/languages/html"
  },
  "tags": [{
    "name": "html",
    "slug": "html",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/thumb/html5.png",
    "label": "HTML 5",
    "context": "languages",
    "description": "HTML 5 is the structure of our web pages. It is the markup that represents the DOM (document object model).",
    "url": "https://egghead.io/api/v1/tags/html",
    "http_url": "https://egghead.io/browse/languages/html"
  }, {
    "name": "css",
    "slug": "css",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/175/thumb/csslang.png",
    "label": "CSS",
    "context": "languages",
    "description": "Cascading Style Sheets bring order and beauty to our applications.",
    "url": "https://egghead.io/api/v1/tags/css",
    "http_url": "https://egghead.io/browse/languages/html"
  }],
  "instructor_url": "https://egghead.io/api/v1/instructors/rory-smith",
  "instructor": {
    "id": 105,
    "slug": "rory-smith",
    "full_name": "Rory Smith",
    "first_name": "Rory",
    "last_name": "Smith",
    "twitter": "alan0buchanan",
    "website": "https://github.com/alanbuchanan/",
    "bio": "",
    "bio_short": "Rory is a front end developer from Leeds, UK.",
    "google_plus": "",
    "http_url": "https://egghead.io/instructors/rory-smith",
    "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/105/original/headshot_rory-smith-1.jpg",
    "lessons_url": "https://egghead.io/api/v1/instructors/rory-smith/lessons",
    "published_lessons": 24,
    "published_courses": 1
  },
  "series_url": "https://egghead.io/api/v1/series/optimize-user-experience-for-mobile-devices-and-browsers",
  "series_row_order": -3440639,
  "series": {
    "title": "Optimize User Experience for mobile devices and browsers",
    "description": "A lot of the time, web apps are built primarily with the desktop layout in consideration, and the mobile layout suffers as a result. In this course we are going to discuss using features of user interface which are optimised for mobile devices.\r\n\r\nWe are going to discuss CSS features that make a big difference and build entire components that work great on mobile devices and browsers. We are going to take into account browser support to ensure our users are getting the experience we want them to.\r\n\r\nMore and more of our users depend on their mobile device to use our web apps. With this in mind, we are going to look at how to optimise the components we build for smaller viewports, and how to ensure our customer gets an optimised version of our web app for their device.\r\n\r\nWe are going to discuss different ways we can view, test, and debug our web app in a mobile setting so that we know what we are seeing is what our user is seeing, because sometimes a desktop browser emulating a mobile device just isn’t enough.\r\n",
    "duration": 1434,
    "slug": "optimize-user-experience-for-mobile-devices-and-browsers",
    "lessons_url": "https://egghead.io/api/v1/series/optimize-user-experience-for-mobile-devices-and-browsers/lessons",
    "url": "https://egghead.io/api/v1/series/optimize-user-experience-for-mobile-devices-and-browsers",
    "http_url": "https://egghead.io/courses/optimize-user-experience-for-mobile-devices-and-browsers",
    "path": "/courses/optimize-user-experience-for-mobile-devices-and-browsers",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/thumb/html5.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/full/html5.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/184/landscape/html5.png",
    "instructor": {
      "id": 105,
      "slug": "rory-smith",
      "full_name": "Rory Smith",
      "first_name": "Rory",
      "last_name": "Smith",
      "twitter": "alan0buchanan",
      "website": "https://github.com/alanbuchanan/",
      "bio": "",
      "bio_short": "Rory is a front end developer from Leeds, UK.",
      "google_plus": "",
      "http_url": "https://egghead.io/instructors/rory-smith",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/105/original/headshot_rory-smith-1.jpg",
      "lessons_url": "https://egghead.io/api/v1/instructors/rory-smith/lessons",
      "published_lessons": 24,
      "published_courses": 1
    }
  },
  "download_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/signed_download",
  "video_processing_status": "completed",
  "media_urls": {
    "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-use-chrome-developer-tools-to-emulate-different-mobile-devices-d0154318ce/egghead-use-chrome-developer-tools-to-emulate-different-mobile-devices-d0154318ce.m3u8",
    "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-use-chrome-developer-tools-to-emulate-different-mobile-devices-d0154318ce/egghead-use-chrome-developer-tools-to-emulate-different-mobile-devices-d0154318ce.mpd"
  },
  "code": {"plunker_url": "https://jsbin.com/bihiseh/edit?html,css,js,output"},
  "cancel_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/cancel",
  "forfeit_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/forfeit",
  "reject_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/reject",
  "approve_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/approve",
  "upload_lesson_http_url": "https://egghead.io/lesson_uploads/new?lesson=html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices&upload=true",
  "edit_lesson_http_url": "https://egghead.io/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/edit",
  "update_lesson_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices",
  "process_lesson_video_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/upload",
  "signed_s3_upload_url": "https://egghead.io/api/v1/s3/sign",
  "create_lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags",
  "lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices",
  "new_comment_url": "https://egghead.io/api/v1/lessons/html-5-use-chrome-developer-tools-to-emulate-different-mobile-devices/comments"
}, {
  "completed": false,
  "toggle_favorite_lesson_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/favorites/toggle",
  "toggle_like_lesson_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/likes/toggle",
  "lesson_view_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/views",
  "favorited": false,
  "liked": false,
  "id": 2951,
  "creator_id": 28751,
  "slug": "elm-use-map-to-transform-data-while-decoding-json-into-elm",
  "title": "Use `map` to transform data while decoding JSON into Elm",
  "state": "approved",
  "summary": "The `map` function defined for `Decoder` can be used to perform data transformations while decoding, including changing the type of data. Transforming data while decoding is useful, because decoding is done at the edge of your Elm app, so you can make certain assumptions about the data in your app.\n",
  "duration": 189,
  "old_technology": null,
  "plays_count": 0,
  "published_at": null,
  "is_pro_content": false,
  "difficulty_rating": 0,
  "series_row_order_position": null,
  "free_forever": false,
  "transcript": "Instructor: [00:00] One of the important functions in functional programming is map. You're probably familiar with the List.map. This is a function where you have a list of A's, and a function from A to B, and you end up with the list of B's.\n\n[00:15] The function is applied to each A with individual list. There is also Maybe.map, and that is a similar signature you start with the Maybe.A in a function from A to B, and you end up with the Maybe of B. There is a map defined for decoders as well, and the pattern is the same, you start with the decoder of A, and you have a function from A to value, and you end up with the decoder of value.\n\n[00:42] The idea is that, if you can decode some JSON into an A, and you have a way to go from A to this value, then you can decode the JSON into the value. Let's go back to our user decoder to see how this could be useful.\n\n[00:56] Let's see that we want a user's email to ours be lower case. The JSON data that we get is not quite consistent, so we get the occasional applicant's email. Now, as part of decoding JSON, we would like to normalize all the emails to be lower case. What we can do, instead of simply using the string decoder, we can use string and map with the String.toLower function.\n\n[01:21] Now, you can save. You can see that even though my JSON has capital J in the email, but the decoder JSON has lower case still. Let's discuss slightly more interesting example. We have this Boolean to indicate whether the user is a premium user or not.\n\n[01:39] In elm, we can use a more elegant representation of this. We could have a type membership, and we can say that the membership can be standard or premium. Now, in our type definition, rather than having this Boolean, we have a membership of type membership.\n\n[02:02] Now, what we decode a JSON representation of a user, we need to go from Boolean to membership. Here, rather than bool, let me use membership. This would be a new decoder that I'll define just below. The idea is that, I'll start with the normal bool decoder, and then I'll map a function, let me call it two membership and this should be a function from bool to membership.\n\n[02:32] Let me put a definition in let clause. We take a Boolean and in our pattern matching the Boolean. Now, this compiles, and you can see that, in our JSON we have isPremium true and in the decoded elm object, we have membership of premium.",
  "lesson_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm",
  "url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm",
  "path": "/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm",
  "http_url": "https://egghead.io/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm",
  "tag_list": ["free"],
  "library_list": [],
  "language_list": ["elm"],
  "framework_list": [],
  "tool_list": [],
  "platform_list": [],
  "skillset_list": [],
  "skill_level_list": [],
  "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/thumb/elm.png",
  "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-use-map-to-transform-data-while-decoding-json-into-elm-HJCoJ0ENz/egghead-use-map-to-transform-data-while-decoding-json-into-elm-HJCoJ0ENz.jpg",
  "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/landscape/elm.png",
  "transcript_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/transcript",
  "subtitles_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/subtitles",
  "related_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/related",
  "comments_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/comments",
  "lesson_errata": [],
  "is_pro": false,
  "primary_tag": {
    "name": "elm",
    "slug": "elm",
    "label": "Elm",
    "context": "languages",
    "description": "Elm is a programming language that provides a clean functional syntax for writing HTML web applications. It promises zero runtime exceptions, fast rendering, time-travel debugging, and much more.",
    "url": "https://egghead.io/api/v1/tags/elm",
    "http_url": "https://egghead.io/browse/languages/elm"
  },
  "tags": [{
    "name": "elm",
    "slug": "elm",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/thumb/elm.png",
    "label": "Elm",
    "context": "languages",
    "description": "Elm is a programming language that provides a clean functional syntax for writing HTML web applications. It promises zero runtime exceptions, fast rendering, time-travel debugging, and much more.",
    "url": "https://egghead.io/api/v1/tags/elm",
    "http_url": "https://egghead.io/browse/languages/elm"
  }],
  "instructor_url": "https://egghead.io/api/v1/instructors/enrico-buonanno",
  "instructor": {
    "id": 150,
    "slug": "enrico-buonanno",
    "full_name": "Enrico Buonanno",
    "first_name": "Enrico",
    "last_name": "Buonanno",
    "twitter": "la_yumba",
    "website": "https://github.com/la-yumba/",
    "bio": "",
    "bio_short": "I obtained an MS in Computer Science at Columbia University in 2001 and have been working as a software developer and architect since. I worked in FinTech, online auctions and other areas, using a number of different languages and technologies. I wrote a book on Functional Programming in C# with Manning.",
    "google_plus": "",
    "http_url": "https://egghead.io/instructors/enrico-buonanno",
    "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/150/original/IMG_0185.jpg",
    "lessons_url": "https://egghead.io/api/v1/instructors/enrico-buonanno/lessons",
    "published_lessons": 16,
    "published_courses": 1
  },
  "series_url": "https://egghead.io/api/v1/series/decode-json-into-elm",
  "series_row_order": 7110656,
  "series": {
    "title": "Decode JSON into Elm",
    "description": "Any non-trivial Elm app will have a need to translate between JSON and Elm, as the Elm app communicates with JavaScript libraries through ports, or consumes JSON from a server API. \r\nElm has the important and somewhat intimidating concept of \"decoders\" that translate dynamically typed JSON into statically typed Elm values. This course will teach you to write your decoders and tackle many common decoding scenarios, including optional and nullable fields, decoding into union types, and decoding recursive structures.",
    "duration": 3057,
    "slug": "decode-json-into-elm",
    "lessons_url": "https://egghead.io/api/v1/series/decode-json-into-elm/lessons",
    "url": "https://egghead.io/api/v1/series/decode-json-into-elm",
    "http_url": "https://egghead.io/courses/decode-json-into-elm",
    "path": "/courses/decode-json-into-elm",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/thumb/EGH_ElmDecoder.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/full/EGH_ElmDecoder.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/landscape/EGH_ElmDecoder.png",
    "instructor": {
      "id": 150,
      "slug": "enrico-buonanno",
      "full_name": "Enrico Buonanno",
      "first_name": "Enrico",
      "last_name": "Buonanno",
      "twitter": "la_yumba",
      "website": "https://github.com/la-yumba/",
      "bio": "",
      "bio_short": "I obtained an MS in Computer Science at Columbia University in 2001 and have been working as a software developer and architect since. I worked in FinTech, online auctions and other areas, using a number of different languages and technologies. I wrote a book on Functional Programming in C# with Manning.",
      "google_plus": "",
      "http_url": "https://egghead.io/instructors/enrico-buonanno",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/150/original/IMG_0185.jpg",
      "lessons_url": "https://egghead.io/api/v1/instructors/enrico-buonanno/lessons",
      "published_lessons": 16,
      "published_courses": 1
    }
  },
  "download_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/signed_download",
  "video_processing_status": "completed",
  "media_urls": {
    "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-use-map-to-transform-data-while-decoding-json-into-elm-727476e610/egghead-use-map-to-transform-data-while-decoding-json-into-elm-727476e610.m3u8",
    "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-use-map-to-transform-data-while-decoding-json-into-elm-727476e610/egghead-use-map-to-transform-data-while-decoding-json-into-elm-727476e610.mpd"
  },
  "code": {"plunker_url": "https://ellie-app.com/embed/dVD8bdQ5Na1/2"},
  "cancel_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/cancel",
  "reject_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/reject",
  "publish_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/publish",
  "upload_lesson_http_url": "https://egghead.io/lesson_uploads/new?lesson=elm-use-map-to-transform-data-while-decoding-json-into-elm&upload=true",
  "edit_lesson_http_url": "https://egghead.io/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/edit",
  "update_lesson_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm",
  "process_lesson_video_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/upload",
  "signed_s3_upload_url": "https://egghead.io/api/v1/s3/sign",
  "create_lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags",
  "lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags/elm-use-map-to-transform-data-while-decoding-json-into-elm",
  "new_comment_url": "https://egghead.io/api/v1/lessons/elm-use-map-to-transform-data-while-decoding-json-into-elm/comments"
}, {
  "completed": false,
  "toggle_favorite_lesson_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/favorites/toggle",
  "toggle_like_lesson_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/likes/toggle",
  "lesson_view_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/views",
  "favorited": false,
  "liked": false,
  "id": 3126,
  "creator_id": 135052,
  "slug": "puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer",
  "title": "Get the Percentage of Unused JS on a page with Puppeteer",
  "state": "approved",
  "summary": "It can be helpful when automating tests, metrics, and integration tools to know not only how much JavaScript there is on a page but to calculate how much is not being used. We are able to calculate the percentage of JS used by getting metrics from the window object. ",
  "duration": 127,
  "old_technology": null,
  "plays_count": 0,
  "published_at": null,
  "is_pro_content": false,
  "difficulty_rating": 0,
  "series_row_order_position": null,
  "free_forever": false,
  "transcript": "Instructor: [00:00] The first thing we need to do is install Puppeteer. Then inside of our file where we're using Puppeteer, we need to require it. I've made this function, getPageMetrics, which is async. The first thing we do is create a browser instance.\r\n\r\n[00:14] With headless as false, it means that we're going to be able to see our Chromium browser open, and walk through the steps that we tell it to. Next, we will create a new page of our browser. We will navigate to google.com, and then close the browser.\r\n\r\n[00:30] The first thing we need to do is do const response equals await, client send, performance.getMetrics. Then let's just console.log this response, so we can see what it looks like. If we run this file in our terminal, we'll see a browser open in the background, and we'll console.log an array full of objects.\r\n\r\n[00:49] These objects have a bunch of metrics for us to use. For example, the amount of nodes that are on the page, some duration values, as well as the JS heap use size, and the total size. We'll use these two to calculate the unused JavaScript on the page.\r\n\r\n[01:06] To calculate that, we'll do const jsUseSize equals response, metrics.find. Then we're going to look on the name property, JS heap use size, grab the value of it. Then const jsTotalSize equals response, metrics.find. We'll look for the name, JS heap total size, and grab that value.\r\n\r\n[01:31] Next, we'll do const usedJS equals math.round, JS use size over JS total size, times 100. Now that we've plucked out the used JS and the total amount of JS used on the page, we can divide the used over the total, times it by 100, and round it out.\r\n\r\n[01:52] Now, we can finish by console.logging 100 minus usedJS, percent of JS is unused. We could run this file in our terminal, and see that 36 percent of the JS is unused on the page.",
  "lesson_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer",
  "url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer",
  "path": "/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer",
  "http_url": "https://egghead.io/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer",
  "tag_list": ["free"],
  "library_list": ["puppeteer"],
  "language_list": ["javascript"],
  "framework_list": [],
  "tool_list": [],
  "platform_list": ["chrome"],
  "skillset_list": [],
  "skill_level_list": [],
  "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/039/thumb/chromelogo.png",
  "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-get-the-percentage-of-unused-js-on-a-page-with-puppeteer-r1CPyfSUG/egghead-get-the-percentage-of-unused-js-on-a-page-with-puppeteer-r1CPyfSUG.jpg",
  "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/213/landscape/puppeteer.png",
  "transcript_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/transcript",
  "subtitles_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/subtitles",
  "related_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/related",
  "comments_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/comments",
  "lesson_errata": [],
  "is_pro": false,
  "primary_tag": {
    "name": "puppeteer",
    "slug": "puppeteer",
    "label": "Puppeteer",
    "context": "libraries",
    "description": "Puppeteer is a Node library which provides a high-level API to control headless Chrome or Chromium over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome or Chromium.",
    "url": "https://egghead.io/api/v1/tags/puppeteer",
    "http_url": "https://egghead.io/browse/libraries/puppeteer"
  },
  "tags": [{
    "name": "puppeteer",
    "slug": "puppeteer",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/213/thumb/puppeteer.png",
    "label": "Puppeteer",
    "context": "libraries",
    "description": "Puppeteer is a Node library which provides a high-level API to control headless Chrome or Chromium over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome or Chromium.",
    "url": "https://egghead.io/api/v1/tags/puppeteer",
    "http_url": "https://egghead.io/browse/libraries/puppeteer"
  }, {
    "name": "javascript",
    "slug": "javascript",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
    "label": "JavaScript",
    "context": "languages",
    "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
    "url": "https://egghead.io/api/v1/tags/javascript",
    "http_url": "https://egghead.io/browse/libraries/puppeteer"
  }, {
    "name": "chrome",
    "slug": "chrome",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/039/thumb/chromelogo.png",
    "label": "Chrome",
    "context": "platforms",
    "description": "A modern web browser owned and maintained by Google.",
    "url": "https://egghead.io/api/v1/tags/chrome",
    "http_url": "https://egghead.io/browse/libraries/puppeteer"
  }],
  "instructor_url": "https://egghead.io/api/v1/instructors/tyler-clark",
  "instructor": {
    "id": 167,
    "slug": "tyler-clark",
    "full_name": "Tyler Clark",
    "first_name": "Tyler",
    "last_name": "Clark",
    "twitter": "iamtylerwclark",
    "website": "https://medium.com/@tylerwclark",
    "bio": "",
    "bio_short": "Full-Stack Dev with a Front-end Focus, Dad, Husband, Tech Blogger, Speaker, and Teacher, Sports Fanatic",
    "google_plus": "",
    "http_url": "https://egghead.io/instructors/tyler-clark",
    "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/167/original/Tyler.jpg",
    "lessons_url": "https://egghead.io/api/v1/instructors/tyler-clark/lessons",
    "published_lessons": 9,
    "published_courses": 1
  },
  "download_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/signed_download",
  "video_processing_status": "completed",
  "media_urls": {
    "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer-92bc591237/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer-92bc591237.m3u8",
    "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer-92bc591237/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer-92bc591237.mpd"
  },
  "code": {"github": {"repo": "puppeteer-page-metrics", "user": "twclark0", "branch": "master"}},
  "cancel_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/cancel",
  "reject_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/reject",
  "publish_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/publish",
  "upload_lesson_http_url": "https://egghead.io/lesson_uploads/new?lesson=puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer&upload=true",
  "edit_lesson_http_url": "https://egghead.io/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/edit",
  "update_lesson_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer",
  "process_lesson_video_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/upload",
  "signed_s3_upload_url": "https://egghead.io/api/v1/s3/sign",
  "create_lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags",
  "lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer",
  "new_comment_url": "https://egghead.io/api/v1/lessons/puppeteer-get-the-percentage-of-unused-js-on-a-page-with-puppeteer/comments"
}, {
  "completed": false,
  "toggle_favorite_lesson_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/favorites/toggle",
  "toggle_like_lesson_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/likes/toggle",
  "lesson_view_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/views",
  "favorited": false,
  "liked": false,
  "id": 3131,
  "creator_id": 37393,
  "slug": "egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router",
  "title": "Preserve the current route’s query parameters when navigating with the Angular Router",
  "state": "submitted",
  "summary": "When we redirect to a different route from within our component's code using the `Router.navigate` or from within a component template via a `[routerLink]` directive, we may want to preserve the current route’s query parameters and carry them on to the next route. In this lesson we'll learn about the router's `preserveQueryParams` option as well as the `[queryParams]` directive on the `[routerLink]`.",
  "duration": 175,
  "old_technology": null,
  "plays_count": 0,
  "published_at": null,
  "is_pro_content": false,
  "difficulty_rating": 0,
  "series_row_order_position": null,
  "free_forever": false,
  "transcript": "",
  "lesson_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router",
  "url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router",
  "path": "/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router",
  "http_url": "https://egghead.io/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router",
  "tag_list": ["free"],
  "library_list": [],
  "language_list": [],
  "framework_list": ["angular"],
  "tool_list": [],
  "platform_list": [],
  "skillset_list": [],
  "skill_level_list": [],
  "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/300/thumb/angular2.png",
  "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router-SJj3m8LIM/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router-SJj3m8LIM.jpg",
  "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/300/landscape/angular2.png",
  "transcript_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/transcript",
  "related_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/related",
  "comments_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/comments",
  "lesson_errata": [],
  "is_pro": false,
  "primary_tag": {
    "name": "angular",
    "slug": "angular",
    "label": "Angular",
    "context": "frameworks",
    "description": "Angular is a development platform for creating applications using modern web standards. Angular includes a wealth of essential features such as mobile gestures, animations, filtering, routing, data binding, security, internationalization, and beautiful UI components. It's extremely modular, lightweight, and easy to learn.",
    "url": "https://egghead.io/api/v1/tags/angular",
    "http_url": "https://egghead.io/browse/frameworks/angular"
  },
  "tags": [{
    "name": "angular",
    "slug": "angular",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/300/thumb/angular2.png",
    "label": "Angular",
    "context": "frameworks",
    "description": "Angular is a development platform for creating applications using modern web standards. Angular includes a wealth of essential features such as mobile gestures, animations, filtering, routing, data binding, security, internationalization, and beautiful UI components. It's extremely modular, lightweight, and easy to learn.",
    "url": "https://egghead.io/api/v1/tags/angular",
    "http_url": "https://egghead.io/browse/frameworks/angular"
  }],
  "instructor_url": "https://egghead.io/api/v1/instructors/juri-strumpflohner",
  "instructor": {
    "id": 137,
    "slug": "juri-strumpflohner",
    "full_name": "Juri Strumpflohner",
    "first_name": "Juri",
    "last_name": "Strumpflohner",
    "twitter": "juristr",
    "website": "https://juristr.com",
    "bio": "",
    "bio_short": "Full stack w/ ❤ for JS & Angular  • 📽 author • 📝 blogger • 🎓 @eggheadio instructor • @google Developer Expert #GDE • freelance trainer • #craftyrol • DE, IT, EN",
    "google_plus": "",
    "http_url": "https://egghead.io/instructors/juri-strumpflohner",
    "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/137/original/profilepic.jpg",
    "lessons_url": "https://egghead.io/api/v1/instructors/juri-strumpflohner/lessons",
    "published_lessons": 44,
    "published_courses": 4
  },
  "series_url": "https://egghead.io/api/v1/series/learn-angular-router-for-real-world-applications",
  "series_row_order": 8388607,
  "series": {
    "title": "Learn Angular Router for Real World Applications",
    "description": "One of the fundamental concepts for building a successful large scale application is to break it down into smaller, potentially independent but mainly more easily controllable and maintainable parts. This starts at the component level, the module level and finally the application routing level. Routing is a core part of every application and should be definitely part of a developer’s toolbelt. \r\n\r\nThis course will guide you step by step and help you get from the basic concepts of routing to mastering expert level topics. We will start learning how to setup and configure the router and how to define simple routes and child routes and best practices of how to organize them using the Routing Module pattern. You will learn about the supported URL types and its segments, how to define them and how to leverage RxJS Observables for subscribing to route updates. We will also talk about how to secure routes with various types of guards and about performance tuning with the router’s lazy loading and preloading capabilities. We will also cover things like route styling and route transition animations.\r\n",
    "duration": 2695,
    "slug": "learn-angular-router-for-real-world-applications",
    "lessons_url": "https://egghead.io/api/v1/series/learn-angular-router-for-real-world-applications/lessons",
    "url": "https://egghead.io/api/v1/series/learn-angular-router-for-real-world-applications",
    "http_url": "https://egghead.io/courses/learn-angular-router-for-real-world-applications",
    "path": "/courses/learn-angular-router-for-real-world-applications",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/300/thumb/angular2.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/300/full/angular2.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/300/landscape/angular2.png",
    "instructor": {
      "id": 137,
      "slug": "juri-strumpflohner",
      "full_name": "Juri Strumpflohner",
      "first_name": "Juri",
      "last_name": "Strumpflohner",
      "twitter": "juristr",
      "website": "https://juristr.com",
      "bio": "",
      "bio_short": "Full stack w/ ❤ for JS & Angular  • 📽 author • 📝 blogger • 🎓 @eggheadio instructor • @google Developer Expert #GDE • freelance trainer • #craftyrol • DE, IT, EN",
      "google_plus": "",
      "http_url": "https://egghead.io/instructors/juri-strumpflohner",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/137/original/profilepic.jpg",
      "lessons_url": "https://egghead.io/api/v1/instructors/juri-strumpflohner/lessons",
      "published_lessons": 44,
      "published_courses": 4
    }
  },
  "download_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/signed_download",
  "video_processing_status": "completed",
  "media_urls": {
    "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router-87a8001d2a/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router-87a8001d2a.m3u8",
    "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router-87a8001d2a/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router-87a8001d2a.mpd"
  },
  "cancel_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/cancel",
  "forfeit_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/forfeit",
  "reject_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/reject",
  "approve_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/approve",
  "upload_lesson_http_url": "https://egghead.io/lesson_uploads/new?lesson=egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router&upload=true",
  "edit_lesson_http_url": "https://egghead.io/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/edit",
  "update_lesson_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router",
  "process_lesson_video_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/upload",
  "signed_s3_upload_url": "https://egghead.io/api/v1/s3/sign",
  "create_lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags",
  "lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router",
  "new_comment_url": "https://egghead.io/api/v1/lessons/egghead-preserve-the-current-route-s-query-parameters-when-navigating-with-the-angular-router/comments"
}, {
  "completed": false,
  "toggle_favorite_lesson_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records/favorites/toggle",
  "toggle_like_lesson_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records/likes/toggle",
  "lesson_view_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records/views",
  "favorited": false,
  "liked": false,
  "id": 2964,
  "creator_id": 28751,
  "slug": "elm-decode-nested-json-objects-into-flat-elm-records",
  "title": "Decode Nested JSON Objects into Flat Elm Records",
  "state": "approved",
  "summary": "Your Elm model may mirror the structure of your JSON exactly, but updating nested records in Elm is somewhat tedious, so you may sometimes choose to keep Elm types \"flatter\" then their JSON counterparts. Using the `at` decoder you can decode nested JSON values, and use them in the construction of a flat Elm record.\n",
  "duration": 104,
  "old_technology": null,
  "plays_count": 0,
  "published_at": null,
  "is_pro_content": false,
  "difficulty_rating": 0,
  "series_row_order_position": null,
  "free_forever": false,
  "transcript": "Instructor: [00:01] Let's imagine that the definition of our JSON changes so that the fields gender and dateOfBirth are no longer at top level, but are nested within a field called profile. If I save now, of course, the coding breaks, because we specified that we should look for these fields, gender and dateOfBirth, but these are no longer found.\n\n[00:32] One way would be to change our model for user and have a nested record called profile, but nested records in Elm are not so much fun. I would rather keep these fields here at top level, as they were. I can use this by changing the field with a different decoder that is called at.\n\n[00:54] At is very similar to field, but rather than taking a single string that's the name of the field, it takes a list of strings. In this case, it's profile, gender, and it will be the same here. This list of strings allows you to drill down inside a nested JSON object.\n\n[01:20] What this is saying is take the value that you find in this nested field, profile, dateOfBirth, and then, we can construct our user. As you can see, our decoder is now fixed. We have a nested JSON object, and we're decoding it into a flat Elm record.",
  "lesson_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records",
  "url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records",
  "path": "/lessons/elm-decode-nested-json-objects-into-flat-elm-records",
  "http_url": "https://egghead.io/lessons/elm-decode-nested-json-objects-into-flat-elm-records",
  "tag_list": ["free"],
  "library_list": [],
  "language_list": ["elm"],
  "framework_list": [],
  "tool_list": [],
  "platform_list": [],
  "skillset_list": [],
  "skill_level_list": [],
  "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/thumb/elm.png",
  "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-decode-nested-json-objects-into-flat-elm-records-B14sx0PEG/egghead-decode-nested-json-objects-into-flat-elm-records-B14sx0PEG.jpg",
  "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/landscape/elm.png",
  "transcript_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records/transcript",
  "subtitles_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records/subtitles",
  "related_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records/related",
  "comments_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records/comments",
  "lesson_errata": [],
  "is_pro": false,
  "primary_tag": {
    "name": "elm",
    "slug": "elm",
    "label": "Elm",
    "context": "languages",
    "description": "Elm is a programming language that provides a clean functional syntax for writing HTML web applications. It promises zero runtime exceptions, fast rendering, time-travel debugging, and much more.",
    "url": "https://egghead.io/api/v1/tags/elm",
    "http_url": "https://egghead.io/browse/languages/elm"
  },
  "tags": [{
    "name": "elm",
    "slug": "elm",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/thumb/elm.png",
    "label": "Elm",
    "context": "languages",
    "description": "Elm is a programming language that provides a clean functional syntax for writing HTML web applications. It promises zero runtime exceptions, fast rendering, time-travel debugging, and much more.",
    "url": "https://egghead.io/api/v1/tags/elm",
    "http_url": "https://egghead.io/browse/languages/elm"
  }],
  "instructor_url": "https://egghead.io/api/v1/instructors/enrico-buonanno",
  "instructor": {
    "id": 150,
    "slug": "enrico-buonanno",
    "full_name": "Enrico Buonanno",
    "first_name": "Enrico",
    "last_name": "Buonanno",
    "twitter": "la_yumba",
    "website": "https://github.com/la-yumba/",
    "bio": "",
    "bio_short": "I obtained an MS in Computer Science at Columbia University in 2001 and have been working as a software developer and architect since. I worked in FinTech, online auctions and other areas, using a number of different languages and technologies. I wrote a book on Functional Programming in C# with Manning.",
    "google_plus": "",
    "http_url": "https://egghead.io/instructors/enrico-buonanno",
    "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/150/original/IMG_0185.jpg",
    "lessons_url": "https://egghead.io/api/v1/instructors/enrico-buonanno/lessons",
    "published_lessons": 16,
    "published_courses": 1
  },
  "series_url": "https://egghead.io/api/v1/series/decode-json-into-elm",
  "series_row_order": 8378368,
  "series": {
    "title": "Decode JSON into Elm",
    "description": "Any non-trivial Elm app will have a need to translate between JSON and Elm, as the Elm app communicates with JavaScript libraries through ports, or consumes JSON from a server API. \r\nElm has the important and somewhat intimidating concept of \"decoders\" that translate dynamically typed JSON into statically typed Elm values. This course will teach you to write your decoders and tackle many common decoding scenarios, including optional and nullable fields, decoding into union types, and decoding recursive structures.",
    "duration": 3057,
    "slug": "decode-json-into-elm",
    "lessons_url": "https://egghead.io/api/v1/series/decode-json-into-elm/lessons",
    "url": "https://egghead.io/api/v1/series/decode-json-into-elm",
    "http_url": "https://egghead.io/courses/decode-json-into-elm",
    "path": "/courses/decode-json-into-elm",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/thumb/EGH_ElmDecoder.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/full/EGH_ElmDecoder.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/landscape/EGH_ElmDecoder.png",
    "instructor": {
      "id": 150,
      "slug": "enrico-buonanno",
      "full_name": "Enrico Buonanno",
      "first_name": "Enrico",
      "last_name": "Buonanno",
      "twitter": "la_yumba",
      "website": "https://github.com/la-yumba/",
      "bio": "",
      "bio_short": "I obtained an MS in Computer Science at Columbia University in 2001 and have been working as a software developer and architect since. I worked in FinTech, online auctions and other areas, using a number of different languages and technologies. I wrote a book on Functional Programming in C# with Manning.",
      "google_plus": "",
      "http_url": "https://egghead.io/instructors/enrico-buonanno",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/150/original/IMG_0185.jpg",
      "lessons_url": "https://egghead.io/api/v1/instructors/enrico-buonanno/lessons",
      "published_lessons": 16,
      "published_courses": 1
    }
  },
  "download_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records/signed_download",
  "video_processing_status": "completed",
  "media_urls": {
    "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-decode-nested-json-objects-into-flat-elm-records-7c7318c57d/egghead-decode-nested-json-objects-into-flat-elm-records-7c7318c57d.m3u8",
    "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-decode-nested-json-objects-into-flat-elm-records-7c7318c57d/egghead-decode-nested-json-objects-into-flat-elm-records-7c7318c57d.mpd"
  },
  "code": {"plunker_url": "https://ellie-app.com/embed/dVD8bdQ5Na1/10"},
  "cancel_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records/cancel",
  "reject_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records/reject",
  "publish_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records/publish",
  "upload_lesson_http_url": "https://egghead.io/lesson_uploads/new?lesson=elm-decode-nested-json-objects-into-flat-elm-records&upload=true",
  "edit_lesson_http_url": "https://egghead.io/lessons/elm-decode-nested-json-objects-into-flat-elm-records/edit",
  "update_lesson_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records",
  "process_lesson_video_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records/upload",
  "signed_s3_upload_url": "https://egghead.io/api/v1/s3/sign",
  "create_lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags",
  "lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags/elm-decode-nested-json-objects-into-flat-elm-records",
  "new_comment_url": "https://egghead.io/api/v1/lessons/elm-decode-nested-json-objects-into-flat-elm-records/comments"
}, {
  "completed": false,
  "toggle_favorite_lesson_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/favorites/toggle",
  "toggle_like_lesson_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/likes/toggle",
  "lesson_view_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/views",
  "favorited": false,
  "liked": false,
  "id": 2934,
  "creator_id": 28751,
  "slug": "elm-understand-elm-decoders-and-the-decodestring-function",
  "title": "Understand Elm Decoders and the `decodeString` Function",
  "state": "approved",
  "summary": "Decoding in Elm is a 2-step business: you first set up a `Decoder`, which represents the structure of the JSON you're going to decode; then, you _run_ the decoder by passing it to the `decodeString` function, along with the JSON to be decoded.\n",
  "duration": 155,
  "old_technology": null,
  "plays_count": 0,
  "published_at": null,
  "is_pro_content": false,
  "difficulty_rating": 0,
  "series_row_order_position": null,
  "free_forever": false,
  "transcript": "Instructor: [00:00] When you're trying to understand the library in Elm, it's always good to look at the types. Let me just open the Elm repo, and let me import json.decode. Now, we can start to have a look at some of these values.\n\n[00:13] Let's see int. This int that we're using here lives in the json.decode package. You can see that this is a decoder of int. String, that's a decoder of string. Bool, as you might have guessed, is a decoder of bool. These are all decoders.\n\n[00:35] When you create an expression like this, let's see what the type for that will be. The repo tells us that that's also a decoder of int. Let's look at the type for userDecoder. Here, I have a plug-in that's offering me to add a type annotation, this is a decoder of user.\n\n[00:54] Essentially, everything is a decoder. You start from these simple, primitive decoders for ints and strings. From those, you build up decoders for more complex values. We now know that decoders compose somewhat like Legos, but how do you actually decode a value?\n\n[01:11] The idea is that we need to go from a decoder of A into a value of type A. Of course, we also need another input parameter. That will be the JSON that we're decoding. The result might not always be an A, because we might be giving some JSON that is in the incorrect format. What we would actually get is a result of, say, string A.\n\n[01:36] This is now beginning to look like a function signature. Indeed, when we look at the functions that actually perform the decoding, this is the signature we find. We have a decoder of A, a string -- if our JSON is in string -- a we get a result wrapped in the decoded A.\n\n[01:52] DecodeString is the main function that we are going to use to decode JSON, but there's a similar function, decodeValue, that's useful when working with ports. There are a couple of important observations.\n\n[02:04] The first is that decoding is not done in the decoder. It's done in the decodeString. What the decoder does is it contains information about what JSON is being passed and how it can be decoded. The second point is that, as a developer, you don't actually have to do the decoding. What you need to do is provide an appropriate decoder.\n\n[02:25] If we go back to our previous example, you see here there's an example of calling decodeString with userDecoder as a decoder and this string here as the JSON.",
  "lesson_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function",
  "url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function",
  "path": "/lessons/elm-understand-elm-decoders-and-the-decodestring-function",
  "http_url": "https://egghead.io/lessons/elm-understand-elm-decoders-and-the-decodestring-function",
  "tag_list": ["free"],
  "library_list": [],
  "language_list": ["elm"],
  "framework_list": [],
  "tool_list": [],
  "platform_list": [],
  "skillset_list": [],
  "skill_level_list": [],
  "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/thumb/elm.png",
  "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-understand-elm-decoders-and-the-decodestring-function-HyfvdAX4z/egghead-understand-elm-decoders-and-the-decodestring-function-HyfvdAX4z.jpg",
  "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/landscape/elm.png",
  "transcript_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/transcript",
  "subtitles_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/subtitles",
  "related_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/related",
  "comments_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/comments",
  "lesson_errata": [],
  "is_pro": false,
  "primary_tag": {
    "name": "elm",
    "slug": "elm",
    "label": "Elm",
    "context": "languages",
    "description": "Elm is a programming language that provides a clean functional syntax for writing HTML web applications. It promises zero runtime exceptions, fast rendering, time-travel debugging, and much more.",
    "url": "https://egghead.io/api/v1/tags/elm",
    "http_url": "https://egghead.io/browse/languages/elm"
  },
  "tags": [{
    "name": "elm",
    "slug": "elm",
    "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/397/thumb/elm.png",
    "label": "Elm",
    "context": "languages",
    "description": "Elm is a programming language that provides a clean functional syntax for writing HTML web applications. It promises zero runtime exceptions, fast rendering, time-travel debugging, and much more.",
    "url": "https://egghead.io/api/v1/tags/elm",
    "http_url": "https://egghead.io/browse/languages/elm"
  }],
  "instructor_url": "https://egghead.io/api/v1/instructors/enrico-buonanno",
  "instructor": {
    "id": 150,
    "slug": "enrico-buonanno",
    "full_name": "Enrico Buonanno",
    "first_name": "Enrico",
    "last_name": "Buonanno",
    "twitter": "la_yumba",
    "website": "https://github.com/la-yumba/",
    "bio": "",
    "bio_short": "I obtained an MS in Computer Science at Columbia University in 2001 and have been working as a software developer and architect since. I worked in FinTech, online auctions and other areas, using a number of different languages and technologies. I wrote a book on Functional Programming in C# with Manning.",
    "google_plus": "",
    "http_url": "https://egghead.io/instructors/enrico-buonanno",
    "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/150/original/IMG_0185.jpg",
    "lessons_url": "https://egghead.io/api/v1/instructors/enrico-buonanno/lessons",
    "published_lessons": 16,
    "published_courses": 1
  },
  "series_url": "https://egghead.io/api/v1/series/decode-json-into-elm",
  "series_row_order": 6029312,
  "series": {
    "title": "Decode JSON into Elm",
    "description": "Any non-trivial Elm app will have a need to translate between JSON and Elm, as the Elm app communicates with JavaScript libraries through ports, or consumes JSON from a server API. \r\nElm has the important and somewhat intimidating concept of \"decoders\" that translate dynamically typed JSON into statically typed Elm values. This course will teach you to write your decoders and tackle many common decoding scenarios, including optional and nullable fields, decoding into union types, and decoding recursive structures.",
    "duration": 3057,
    "slug": "decode-json-into-elm",
    "lessons_url": "https://egghead.io/api/v1/series/decode-json-into-elm/lessons",
    "url": "https://egghead.io/api/v1/series/decode-json-into-elm",
    "http_url": "https://egghead.io/courses/decode-json-into-elm",
    "path": "/courses/decode-json-into-elm",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/thumb/EGH_ElmDecoder.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/full/EGH_ElmDecoder.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/188/landscape/EGH_ElmDecoder.png",
    "instructor": {
      "id": 150,
      "slug": "enrico-buonanno",
      "full_name": "Enrico Buonanno",
      "first_name": "Enrico",
      "last_name": "Buonanno",
      "twitter": "la_yumba",
      "website": "https://github.com/la-yumba/",
      "bio": "",
      "bio_short": "I obtained an MS in Computer Science at Columbia University in 2001 and have been working as a software developer and architect since. I worked in FinTech, online auctions and other areas, using a number of different languages and technologies. I wrote a book on Functional Programming in C# with Manning.",
      "google_plus": "",
      "http_url": "https://egghead.io/instructors/enrico-buonanno",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/150/original/IMG_0185.jpg",
      "lessons_url": "https://egghead.io/api/v1/instructors/enrico-buonanno/lessons",
      "published_lessons": 16,
      "published_courses": 1
    }
  },
  "download_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/signed_download",
  "video_processing_status": "completed",
  "media_urls": {
    "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-understand-elm-decoders-and-the-decodestring-function-c334b2f88c/egghead-understand-elm-decoders-and-the-decodestring-function-c334b2f88c.m3u8",
    "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-understand-elm-decoders-and-the-decodestring-function-c334b2f88c/egghead-understand-elm-decoders-and-the-decodestring-function-c334b2f88c.mpd"
  },
  "cancel_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/cancel",
  "reject_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/reject",
  "publish_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/publish",
  "upload_lesson_http_url": "https://egghead.io/lesson_uploads/new?lesson=elm-understand-elm-decoders-and-the-decodestring-function&upload=true",
  "edit_lesson_http_url": "https://egghead.io/lessons/elm-understand-elm-decoders-and-the-decodestring-function/edit",
  "update_lesson_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function",
  "process_lesson_video_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/upload",
  "signed_s3_upload_url": "https://egghead.io/api/v1/s3/sign",
  "create_lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags",
  "lesson_version_flag_url": "https://egghead.io/api/v1/lesson_version_flags/elm-understand-elm-decoders-and-the-decodestring-function",
  "new_comment_url": "https://egghead.io/api/v1/lessons/elm-understand-elm-decoders-and-the-decodestring-function/comments"
}]